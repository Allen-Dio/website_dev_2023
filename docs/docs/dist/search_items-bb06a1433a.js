searchNodes=[{"ref":"ABI.html","title":"ABI","type":"module","doc":""},{"ref":"ABI.html#decode_revert/1","title":"ABI.decode_revert/1","type":"function","doc":""},{"ref":"ABI.html#do_encode_data/2","title":"ABI.do_encode_data/2","type":"function","doc":""},{"ref":"ABI.html#dynamic/2","title":"ABI.dynamic/2","type":"function","doc":""},{"ref":"ABI.html#encode/2","title":"ABI.encode/2","type":"function","doc":""},{"ref":"ABI.html#encode_args/2","title":"ABI.encode_args/2","type":"function","doc":""},{"ref":"ABI.html#encode_call/3","title":"ABI.encode_call/3","type":"function","doc":""},{"ref":"ABI.html#encode_data/2","title":"ABI.encode_data/2","type":"function","doc":""},{"ref":"ABI.html#encode_spec/2","title":"ABI.encode_spec/2","type":"function","doc":""},{"ref":"ABI.html#subtype/1","title":"ABI.subtype/1","type":"function","doc":"subtype returns the individual element type of an dynamic/array"},{"ref":"Base16.html","title":"Base16","type":"module","doc":""},{"ref":"Base16.html#decode/1","title":"Base16.decode/1","type":"function","doc":""},{"ref":"Base16.html#decode_int/1","title":"Base16.decode_int/1","type":"function","doc":""},{"ref":"Base16.html#encode/2","title":"Base16.encode/2","type":"function","doc":""},{"ref":"Bench.html","title":"Bench","type":"module","doc":""},{"ref":"Bench.html#create_contract/2","title":"Bench.create_contract/2","type":"function","doc":""},{"ref":"Bench.html#increment/1","title":"Bench.increment/1","type":"function","doc":""},{"ref":"BertExt.html","title":"BertExt","type":"module","doc":""},{"ref":"BertExt.html#decode!/1","title":"BertExt.decode!/1","type":"function","doc":""},{"ref":"BertExt.html#encode!/1","title":"BertExt.encode!/1","type":"function","doc":""},{"ref":"BertInt.html","title":"BertInt","type":"module","doc":"Binary Erlang Term encoding for internal node-to-node encoding."},{"ref":"BertInt.html#decode!/1","title":"BertInt.decode!/1","type":"function","doc":""},{"ref":"BertInt.html#decode_unsafe!/1","title":"BertInt.decode_unsafe!/1","type":"function","doc":"decode! variant for decoding locally created files, can decode atoms."},{"ref":"BertInt.html#encode!/1","title":"BertInt.encode!/1","type":"function","doc":""},{"ref":"Certs.html","title":"Certs","type":"module","doc":""},{"ref":"Certs.html#extract/1","title":"Certs.extract/1","type":"function","doc":""},{"ref":"Certs.html#getfield/3","title":"Certs.getfield/3","type":"function","doc":""},{"ref":"Certs.html#id_from_der/1","title":"Certs.id_from_der/1","type":"function","doc":""},{"ref":"Certs.html#id_from_file/1","title":"Certs.id_from_file/1","type":"function","doc":""},{"ref":"Certs.html#keywords/2","title":"Certs.keywords/2","type":"function","doc":""},{"ref":"Certs.html#private_from_file/1","title":"Certs.private_from_file/1","type":"function","doc":""},{"ref":"Chain.html","title":"Chain","type":"module","doc":""},{"ref":"Chain.html#add_block/2","title":"Chain.add_block/2","type":"function","doc":""},{"ref":"Chain.html#averageTransactionGas/0","title":"Chain.averageTransactionGas/0","type":"function","doc":""},{"ref":"Chain.html#block/1","title":"Chain.block/1","type":"function","doc":""},{"ref":"Chain.html#block_by_hash/1","title":"Chain.block_by_hash/1","type":"function","doc":""},{"ref":"Chain.html#blockchainDelta/0","title":"Chain.blockchainDelta/0","type":"function","doc":""},{"ref":"Chain.html#blocks/0","title":"Chain.blocks/0","type":"function","doc":""},{"ref":"Chain.html#blocks/1","title":"Chain.blocks/1","type":"function","doc":""},{"ref":"Chain.html#blocktimeGoal/0","title":"Chain.blocktimeGoal/0","type":"function","doc":""},{"ref":"Chain.html#child_spec/1","title":"Chain.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Chain.html#epoch/0","title":"Chain.epoch/0","type":"function","doc":""},{"ref":"Chain.html#epoch_length/0","title":"Chain.epoch_length/0","type":"function","doc":""},{"ref":"Chain.html#final_block/0","title":"Chain.final_block/0","type":"function","doc":""},{"ref":"Chain.html#gasLimit/0","title":"Chain.gasLimit/0","type":"function","doc":"Gaslimit for block validation and estimation"},{"ref":"Chain.html#gas_price/0","title":"Chain.gas_price/0","type":"function","doc":"GasPrice for block validation and estimation"},{"ref":"Chain.html#generate_blockquick_window/1","title":"Chain.generate_blockquick_window/1","type":"function","doc":""},{"ref":"Chain.html#genesis_hash/0","title":"Chain.genesis_hash/0","type":"function","doc":""},{"ref":"Chain.html#init/1","title":"Chain.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Chain.html#load_file/2","title":"Chain.load_file/2","type":"function","doc":""},{"ref":"Chain.html#peak/0","title":"Chain.peak/0","type":"function","doc":""},{"ref":"Chain.html#peak_block/0","title":"Chain.peak_block/0","type":"function","doc":""},{"ref":"Chain.html#peak_state/0","title":"Chain.peak_state/0","type":"function","doc":""},{"ref":"Chain.html#pre_genesis_hash/0","title":"Chain.pre_genesis_hash/0","type":"function","doc":""},{"ref":"Chain.html#print_transactions/1","title":"Chain.print_transactions/1","type":"function","doc":""},{"ref":"Chain.html#reseed/0","title":"Chain.reseed/0","type":"function","doc":"reseed is a debugging function"},{"ref":"Chain.html#reset_state/0","title":"Chain.reset_state/0","type":"function","doc":"Function for unit tests, resets state to genesis state"},{"ref":"Chain.html#saver_loop/0","title":"Chain.saver_loop/0","type":"function","doc":""},{"ref":"Chain.html#set_final_block/1","title":"Chain.set_final_block/1","type":"function","doc":""},{"ref":"Chain.html#set_state/1","title":"Chain.set_state/1","type":"function","doc":"Function for unit tests, replaces the current state"},{"ref":"Chain.html#start_link/1","title":"Chain.start_link/1","type":"function","doc":""},{"ref":"Chain.html#state/0","title":"Chain.state/0","type":"function","doc":""},{"ref":"Chain.html#state/1","title":"Chain.state/1","type":"function","doc":""},{"ref":"Chain.html#store_file/3","title":"Chain.store_file/3","type":"function","doc":""},{"ref":"Chain.html#sync/0","title":"Chain.sync/0","type":"function","doc":""},{"ref":"Chain.html#t:t/0","title":"Chain.t/0","type":"type","doc":""},{"ref":"Chain.Account.html","title":"Chain.Account","type":"module","doc":""},{"ref":"Chain.Account.html#balance/1","title":"Chain.Account.balance/1","type":"function","doc":""},{"ref":"Chain.Account.html#code/1","title":"Chain.Account.code/1","type":"function","doc":""},{"ref":"Chain.Account.html#codehash/1","title":"Chain.Account.codehash/1","type":"function","doc":""},{"ref":"Chain.Account.html#hash/1","title":"Chain.Account.hash/1","type":"function","doc":""},{"ref":"Chain.Account.html#new/1","title":"Chain.Account.new/1","type":"function","doc":""},{"ref":"Chain.Account.html#nonce/1","title":"Chain.Account.nonce/1","type":"function","doc":""},{"ref":"Chain.Account.html#normalize/1","title":"Chain.Account.normalize/1","type":"function","doc":""},{"ref":"Chain.Account.html#root/1","title":"Chain.Account.root/1","type":"function","doc":""},{"ref":"Chain.Account.html#storageInteger/2","title":"Chain.Account.storageInteger/2","type":"function","doc":""},{"ref":"Chain.Account.html#storageSetValue/3","title":"Chain.Account.storageSetValue/3","type":"function","doc":""},{"ref":"Chain.Account.html#storageValue/2","title":"Chain.Account.storageValue/2","type":"function","doc":""},{"ref":"Chain.Account.html#to_rlp/1","title":"Chain.Account.to_rlp/1","type":"function","doc":""},{"ref":"Chain.Account.html#t:t/0","title":"Chain.Account.t/0","type":"type","doc":""},{"ref":"Chain.Block.html","title":"Chain.Block","type":"module","doc":""},{"ref":"Chain.Block.html#coinbase/1","title":"Chain.Block.coinbase/1","type":"function","doc":""},{"ref":"Chain.Block.html#create/5","title":"Chain.Block.create/5","type":"function","doc":"Creates a new block and stores the generated state in cache file"},{"ref":"Chain.Block.html#difficulty/1","title":"Chain.Block.difficulty/1","type":"function","doc":""},{"ref":"Chain.Block.html#encode_transactions/1","title":"Chain.Block.encode_transactions/1","type":"function","doc":""},{"ref":"Chain.Block.html#epoch/1","title":"Chain.Block.epoch/1","type":"function","doc":""},{"ref":"Chain.Block.html#extraData/1","title":"Chain.Block.extraData/1","type":"function","doc":""},{"ref":"Chain.Block.html#gasLimit/1","title":"Chain.Block.gasLimit/1","type":"function","doc":""},{"ref":"Chain.Block.html#gasUsed/1","title":"Chain.Block.gasUsed/1","type":"function","doc":""},{"ref":"Chain.Block.html#gas_price/1","title":"Chain.Block.gas_price/1","type":"function","doc":""},{"ref":"Chain.Block.html#has_state?/1","title":"Chain.Block.has_state?/1","type":"function","doc":""},{"ref":"Chain.Block.html#hash/1","title":"Chain.Block.hash/1","type":"function","doc":""},{"ref":"Chain.Block.html#hash_in_target?/2","title":"Chain.Block.hash_in_target?/2","type":"function","doc":""},{"ref":"Chain.Block.html#hash_target/1","title":"Chain.Block.hash_target/1","type":"function","doc":""},{"ref":"Chain.Block.html#hash_valid?/1","title":"Chain.Block.hash_valid?/1","type":"function","doc":""},{"ref":"Chain.Block.html#header/1","title":"Chain.Block.header/1","type":"function","doc":""},{"ref":"Chain.Block.html#increment_nonce/1","title":"Chain.Block.increment_nonce/1","type":"function","doc":""},{"ref":"Chain.Block.html#logs/1","title":"Chain.Block.logs/1","type":"function","doc":""},{"ref":"Chain.Block.html#logsBloom/1","title":"Chain.Block.logsBloom/1","type":"function","doc":""},{"ref":"Chain.Block.html#miner/1","title":"Chain.Block.miner/1","type":"function","doc":""},{"ref":"Chain.Block.html#nonce/1","title":"Chain.Block.nonce/1","type":"function","doc":""},{"ref":"Chain.Block.html#number/1","title":"Chain.Block.number/1","type":"function","doc":""},{"ref":"Chain.Block.html#parent/1","title":"Chain.Block.parent/1","type":"function","doc":""},{"ref":"Chain.Block.html#parent_hash/1","title":"Chain.Block.parent_hash/1","type":"function","doc":""},{"ref":"Chain.Block.html#receipts/1","title":"Chain.Block.receipts/1","type":"function","doc":""},{"ref":"Chain.Block.html#receiptsRoot/1","title":"Chain.Block.receiptsRoot/1","type":"function","doc":""},{"ref":"Chain.Block.html#sign/2","title":"Chain.Block.sign/2","type":"function","doc":""},{"ref":"Chain.Block.html#simulate/2","title":"Chain.Block.simulate/2","type":"function","doc":""},{"ref":"Chain.Block.html#size/1","title":"Chain.Block.size/1","type":"function","doc":""},{"ref":"Chain.Block.html#state/1","title":"Chain.Block.state/1","type":"function","doc":""},{"ref":"Chain.Block.html#state_hash/1","title":"Chain.Block.state_hash/1","type":"function","doc":""},{"ref":"Chain.Block.html#store/1","title":"Chain.Block.store/1","type":"function","doc":""},{"ref":"Chain.Block.html#timestamp/1","title":"Chain.Block.timestamp/1","type":"function","doc":""},{"ref":"Chain.Block.html#totalDifficulty/1","title":"Chain.Block.totalDifficulty/1","type":"function","doc":""},{"ref":"Chain.Block.html#transactionGas/2","title":"Chain.Block.transactionGas/2","type":"function","doc":""},{"ref":"Chain.Block.html#transactionIndex/2","title":"Chain.Block.transactionIndex/2","type":"function","doc":""},{"ref":"Chain.Block.html#transactionOut/2","title":"Chain.Block.transactionOut/2","type":"function","doc":""},{"ref":"Chain.Block.html#transactionReceipt/2","title":"Chain.Block.transactionReceipt/2","type":"function","doc":""},{"ref":"Chain.Block.html#transactionStatus/2","title":"Chain.Block.transactionStatus/2","type":"function","doc":""},{"ref":"Chain.Block.html#transactions/1","title":"Chain.Block.transactions/1","type":"function","doc":""},{"ref":"Chain.Block.html#txhash/1","title":"Chain.Block.txhash/1","type":"function","doc":""},{"ref":"Chain.Block.html#valid?/1","title":"Chain.Block.valid?/1","type":"function","doc":""},{"ref":"Chain.Block.html#validate/1","title":"Chain.Block.validate/1","type":"function","doc":""},{"ref":"Chain.Block.html#t:t/0","title":"Chain.Block.t/0","type":"type","doc":""},{"ref":"Chain.BlockCache.html","title":"Chain.BlockCache","type":"module","doc":""},{"ref":"Chain.BlockCache.html#cache/1","title":"Chain.BlockCache.cache/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#child_spec/1","title":"Chain.BlockCache.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Chain.BlockCache.html#coinbase/1","title":"Chain.BlockCache.coinbase/1","type":"function","doc":"See Chain.Block.coinbase/1."},{"ref":"Chain.BlockCache.html#create/5","title":"Chain.BlockCache.create/5","type":"function","doc":"See Chain.Block.create/5."},{"ref":"Chain.BlockCache.html#create_cache/1","title":"Chain.BlockCache.create_cache/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#difficulty/1","title":"Chain.BlockCache.difficulty/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#encode_transactions/1","title":"Chain.BlockCache.encode_transactions/1","type":"function","doc":"See Chain.Block.encode_transactions/1."},{"ref":"Chain.BlockCache.html#epoch/1","title":"Chain.BlockCache.epoch/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#extraData/1","title":"Chain.BlockCache.extraData/1","type":"function","doc":"See Chain.Block.extraData/1."},{"ref":"Chain.BlockCache.html#gasLimit/1","title":"Chain.BlockCache.gasLimit/1","type":"function","doc":"See Chain.Block.gasLimit/1."},{"ref":"Chain.BlockCache.html#gasUsed/1","title":"Chain.BlockCache.gasUsed/1","type":"function","doc":"See Chain.Block.gasUsed/1."},{"ref":"Chain.BlockCache.html#gas_price/1","title":"Chain.BlockCache.gas_price/1","type":"function","doc":"See Chain.Block.gas_price/1."},{"ref":"Chain.BlockCache.html#has_state?/1","title":"Chain.BlockCache.has_state?/1","type":"function","doc":"See Chain.Block.has_state?/1."},{"ref":"Chain.BlockCache.html#hash/1","title":"Chain.BlockCache.hash/1","type":"function","doc":"See Chain.Block.hash/1."},{"ref":"Chain.BlockCache.html#hash_in_target?/2","title":"Chain.BlockCache.hash_in_target?/2","type":"function","doc":"See Chain.Block.hash_in_target?/2."},{"ref":"Chain.BlockCache.html#hash_target/1","title":"Chain.BlockCache.hash_target/1","type":"function","doc":"See Chain.Block.hash_target/1."},{"ref":"Chain.BlockCache.html#hash_valid?/1","title":"Chain.BlockCache.hash_valid?/1","type":"function","doc":"See Chain.Block.hash_valid?/1."},{"ref":"Chain.BlockCache.html#header/1","title":"Chain.BlockCache.header/1","type":"function","doc":"See Chain.Block.header/1."},{"ref":"Chain.BlockCache.html#increment_nonce/1","title":"Chain.BlockCache.increment_nonce/1","type":"function","doc":"See Chain.Block.increment_nonce/1."},{"ref":"Chain.BlockCache.html#init/1","title":"Chain.BlockCache.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Chain.BlockCache.html#logs/1","title":"Chain.BlockCache.logs/1","type":"function","doc":"See Chain.Block.logs/1."},{"ref":"Chain.BlockCache.html#logsBloom/1","title":"Chain.BlockCache.logsBloom/1","type":"function","doc":"See Chain.Block.logsBloom/1."},{"ref":"Chain.BlockCache.html#miner/1","title":"Chain.BlockCache.miner/1","type":"function","doc":"See Chain.Block.miner/1."},{"ref":"Chain.BlockCache.html#nonce/1","title":"Chain.BlockCache.nonce/1","type":"function","doc":"See Chain.Block.nonce/1."},{"ref":"Chain.BlockCache.html#number/1","title":"Chain.BlockCache.number/1","type":"function","doc":"See Chain.Block.number/1."},{"ref":"Chain.BlockCache.html#parent/1","title":"Chain.BlockCache.parent/1","type":"function","doc":"See Chain.Block.parent/1."},{"ref":"Chain.BlockCache.html#parent_hash/1","title":"Chain.BlockCache.parent_hash/1","type":"function","doc":"See Chain.Block.parent_hash/1."},{"ref":"Chain.BlockCache.html#receipts/1","title":"Chain.BlockCache.receipts/1","type":"function","doc":"See Chain.Block.receipts/1."},{"ref":"Chain.BlockCache.html#receiptsRoot/1","title":"Chain.BlockCache.receiptsRoot/1","type":"function","doc":"See Chain.Block.receiptsRoot/1."},{"ref":"Chain.BlockCache.html#reset/0","title":"Chain.BlockCache.reset/0","type":"function","doc":""},{"ref":"Chain.BlockCache.html#save/0","title":"Chain.BlockCache.save/0","type":"function","doc":""},{"ref":"Chain.BlockCache.html#sign/2","title":"Chain.BlockCache.sign/2","type":"function","doc":"See Chain.Block.sign/2."},{"ref":"Chain.BlockCache.html#simulate/2","title":"Chain.BlockCache.simulate/2","type":"function","doc":"See Chain.Block.simulate/2."},{"ref":"Chain.BlockCache.html#size/1","title":"Chain.BlockCache.size/1","type":"function","doc":"See Chain.Block.size/1."},{"ref":"Chain.BlockCache.html#start_link/1","title":"Chain.BlockCache.start_link/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#state/1","title":"Chain.BlockCache.state/1","type":"function","doc":"See Chain.Block.state/1."},{"ref":"Chain.BlockCache.html#state_hash/1","title":"Chain.BlockCache.state_hash/1","type":"function","doc":"See Chain.Block.state_hash/1."},{"ref":"Chain.BlockCache.html#timestamp/1","title":"Chain.BlockCache.timestamp/1","type":"function","doc":"See Chain.Block.timestamp/1."},{"ref":"Chain.BlockCache.html#totalDifficulty/1","title":"Chain.BlockCache.totalDifficulty/1","type":"function","doc":""},{"ref":"Chain.BlockCache.html#transactionGas/2","title":"Chain.BlockCache.transactionGas/2","type":"function","doc":"See Chain.Block.transactionGas/2."},{"ref":"Chain.BlockCache.html#transactionIndex/2","title":"Chain.BlockCache.transactionIndex/2","type":"function","doc":"See Chain.Block.transactionIndex/2."},{"ref":"Chain.BlockCache.html#transactionOut/2","title":"Chain.BlockCache.transactionOut/2","type":"function","doc":"See Chain.Block.transactionOut/2."},{"ref":"Chain.BlockCache.html#transactionStatus/2","title":"Chain.BlockCache.transactionStatus/2","type":"function","doc":"See Chain.Block.transactionStatus/2."},{"ref":"Chain.BlockCache.html#transactions/1","title":"Chain.BlockCache.transactions/1","type":"function","doc":"See Chain.Block.transactions/1."},{"ref":"Chain.BlockCache.html#txhash/1","title":"Chain.BlockCache.txhash/1","type":"function","doc":"See Chain.Block.txhash/1."},{"ref":"Chain.BlockCache.html#valid?/1","title":"Chain.BlockCache.valid?/1","type":"function","doc":"See Chain.Block.valid?/1."},{"ref":"Chain.BlockCache.html#validate/1","title":"Chain.BlockCache.validate/1","type":"function","doc":"See Chain.Block.validate/1."},{"ref":"Chain.GenesisFactory.html","title":"Chain.GenesisFactory","type":"module","doc":""},{"ref":"Chain.GenesisFactory.html#genesis/3","title":"Chain.GenesisFactory.genesis/3","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#genesis_accounts/0","title":"Chain.GenesisFactory.genesis_accounts/0","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#genesis_miner/0","title":"Chain.GenesisFactory.genesis_miner/0","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#genesis_parent/2","title":"Chain.GenesisFactory.genesis_parent/2","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#genesis_state/1","title":"Chain.GenesisFactory.genesis_state/1","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#genesis_transactions/1","title":"Chain.GenesisFactory.genesis_transactions/1","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#prod_genesis_accounts/0","title":"Chain.GenesisFactory.prod_genesis_accounts/0","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#test_genesis_accounts/0","title":"Chain.GenesisFactory.test_genesis_accounts/0","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#test_genesis_transactions/1","title":"Chain.GenesisFactory.test_genesis_transactions/1","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#prenet/0","title":"Chain.GenesisFactory.prenet/0","type":"function","doc":""},{"ref":"Chain.GenesisFactory.html#prenet_parent/0","title":"Chain.GenesisFactory.prenet_parent/0","type":"function","doc":""},{"ref":"Chain.Header.html","title":"Chain.Header","type":"module","doc":""},{"ref":"Chain.Header.html#flat/1","title":"Chain.Header.flat/1","type":"function","doc":""},{"ref":"Chain.Header.html#recover_miner/1","title":"Chain.Header.recover_miner/1","type":"function","doc":""},{"ref":"Chain.Header.html#sign/2","title":"Chain.Header.sign/2","type":"function","doc":""},{"ref":"Chain.Header.html#state_hash/1","title":"Chain.Header.state_hash/1","type":"function","doc":""},{"ref":"Chain.Header.html#update_hash/1","title":"Chain.Header.update_hash/1","type":"function","doc":""},{"ref":"Chain.Header.html#t:t/0","title":"Chain.Header.t/0","type":"type","doc":""},{"ref":"Chain.Pool.html","title":"Chain.Pool","type":"module","doc":""},{"ref":"Chain.Pool.html#add_transaction/2","title":"Chain.Pool.add_transaction/2","type":"function","doc":""},{"ref":"Chain.Pool.html#child_spec/1","title":"Chain.Pool.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Chain.Pool.html#flush/0","title":"Chain.Pool.flush/0","type":"function","doc":""},{"ref":"Chain.Pool.html#init/1","title":"Chain.Pool.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Chain.Pool.html#proposal/0","title":"Chain.Pool.proposal/0","type":"function","doc":"Returns the optimal mining proposal"},{"ref":"Chain.Pool.html#remove_transaction/1","title":"Chain.Pool.remove_transaction/1","type":"function","doc":""},{"ref":"Chain.Pool.html#remove_transactions/1","title":"Chain.Pool.remove_transactions/1","type":"function","doc":""},{"ref":"Chain.Pool.html#replace_transaction/2","title":"Chain.Pool.replace_transaction/2","type":"function","doc":""},{"ref":"Chain.Pool.html#start_link/1","title":"Chain.Pool.start_link/1","type":"function","doc":""},{"ref":"Chain.Pool.html#transactions/0","title":"Chain.Pool.transactions/0","type":"function","doc":""},{"ref":"Chain.State.html","title":"Chain.State","type":"module","doc":""},{"ref":"Chain.State.html#account/2","title":"Chain.State.account/2","type":"function","doc":""},{"ref":"Chain.State.html#accounts/1","title":"Chain.State.accounts/1","type":"function","doc":""},{"ref":"Chain.State.html#delete_account/2","title":"Chain.State.delete_account/2","type":"function","doc":""},{"ref":"Chain.State.html#difference/2","title":"Chain.State.difference/2","type":"function","doc":""},{"ref":"Chain.State.html#ensure_account/2","title":"Chain.State.ensure_account/2","type":"function","doc":""},{"ref":"Chain.State.html#from_binary/1","title":"Chain.State.from_binary/1","type":"function","doc":""},{"ref":"Chain.State.html#garbage_collect/0","title":"Chain.State.garbage_collect/0","type":"function","doc":""},{"ref":"Chain.State.html#hash/1","title":"Chain.State.hash/1","type":"function","doc":""},{"ref":"Chain.State.html#init/0","title":"Chain.State.init/0","type":"function","doc":""},{"ref":"Chain.State.html#new/0","title":"Chain.State.new/0","type":"function","doc":""},{"ref":"Chain.State.html#restore/1","title":"Chain.State.restore/1","type":"function","doc":""},{"ref":"Chain.State.html#restore?/1","title":"Chain.State.restore?/1","type":"function","doc":""},{"ref":"Chain.State.html#rewrite_all/0","title":"Chain.State.rewrite_all/0","type":"function","doc":""},{"ref":"Chain.State.html#set_account/3","title":"Chain.State.set_account/3","type":"function","doc":""},{"ref":"Chain.State.html#store/1","title":"Chain.State.store/1","type":"function","doc":""},{"ref":"Chain.State.html#to_binary/1","title":"Chain.State.to_binary/1","type":"function","doc":""},{"ref":"Chain.Transaction.html","title":"Chain.Transaction","type":"module","doc":""},{"ref":"Chain.Transaction.html#apply/4","title":"Chain.Transaction.apply/4","type":"function","doc":""},{"ref":"Chain.Transaction.html#chain_id/1","title":"Chain.Transaction.chain_id/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#contract_creation?/1","title":"Chain.Transaction.contract_creation?/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#data/1","title":"Chain.Transaction.data/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#from/1","title":"Chain.Transaction.from/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#from_rlp/1","title":"Chain.Transaction.from_rlp/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#gas_limit/1","title":"Chain.Transaction.gas_limit/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#gas_price/1","title":"Chain.Transaction.gas_price/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#hash/1","title":"Chain.Transaction.hash/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#new_contract_address/1","title":"Chain.Transaction.new_contract_address/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#nonce/1","title":"Chain.Transaction.nonce/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#origin/1","title":"Chain.Transaction.origin/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#payload/1","title":"Chain.Transaction.payload/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#recover/1","title":"Chain.Transaction.recover/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#sign/2","title":"Chain.Transaction.sign/2","type":"function","doc":""},{"ref":"Chain.Transaction.html#signature/1","title":"Chain.Transaction.signature/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#to/1","title":"Chain.Transaction.to/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#to_message/1","title":"Chain.Transaction.to_message/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#to_rlp/1","title":"Chain.Transaction.to_rlp/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#type/1","title":"Chain.Transaction.type/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#valid?/1","title":"Chain.Transaction.valid?/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#validate/1","title":"Chain.Transaction.validate/1","type":"function","doc":""},{"ref":"Chain.Transaction.html#value/1","title":"Chain.Transaction.value/1","type":"function","doc":""},{"ref":"Chain.TransactionReceipt.html","title":"Chain.TransactionReceipt","type":"module","doc":""},{"ref":"Chain.TransactionReceipt.html#t:t/0","title":"Chain.TransactionReceipt.t/0","type":"type","doc":""},{"ref":"Chain.Worker.html","title":"Chain.Worker","type":"module","doc":""},{"ref":"Chain.Worker.html#candidate/0","title":"Chain.Worker.candidate/0","type":"function","doc":""},{"ref":"Chain.Worker.html#child_spec/1","title":"Chain.Worker.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Chain.Worker.html#init/1","title":"Chain.Worker.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Chain.Worker.html#mode/0","title":"Chain.Worker.mode/0","type":"function","doc":""},{"ref":"Chain.Worker.html#set_mode/1","title":"Chain.Worker.set_mode/1","type":"function","doc":""},{"ref":"Chain.Worker.html#start_link/1","title":"Chain.Worker.start_link/1","type":"function","doc":""},{"ref":"Chain.Worker.html#update/0","title":"Chain.Worker.update/0","type":"function","doc":""},{"ref":"Chain.Worker.html#work/0","title":"Chain.Worker.work/0","type":"function","doc":""},{"ref":"Chain.Worker.html#t:t/0","title":"Chain.Worker.t/0","type":"type","doc":""},{"ref":"Contract.Fleet.html","title":"Contract.Fleet","type":"module","doc":"Wrapper for the FleetRegistry contract functions as needed by the tests"},{"ref":"Contract.Fleet.html#deviceWhitelist/1","title":"Contract.Fleet.deviceWhitelist/1","type":"function","doc":""},{"ref":"Contract.Fleet.html#setDeviceWhiteListTx/2","title":"Contract.Fleet.setDeviceWhiteListTx/2","type":"function","doc":""},{"ref":"Contract.Registry.html","title":"Contract.Registry","type":"module","doc":"Wrapper for the DiodeRegistry contract functions as needed by the inner workings of the chain"},{"ref":"Contract.Registry.html#epoch/1","title":"Contract.Registry.epoch/1","type":"function","doc":""},{"ref":"Contract.Registry.html#minerValue/3","title":"Contract.Registry.minerValue/3","type":"function","doc":""},{"ref":"Contract.Registry.html#submitTicketRawTx/1","title":"Contract.Registry.submitTicketRawTx/1","type":"function","doc":""},{"ref":"Debounce.html","title":"Debounce","type":"module","doc":""},{"ref":"Debounce.html#apply/3","title":"Debounce.apply/3","type":"function","doc":"apply executes the function after the specified timeout t0 + timeout, when apply is called multiple times it does not affect the point in time when the next call is happening (t0 + timeout) but updates the fun"},{"ref":"Debounce.html#child_spec/1","title":"Debounce.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Debounce.html#delay/3","title":"Debounce.delay/3","type":"function","doc":"delay executes the function after the specified timeout t0 + timeout, when delay is called multipe times the timeout is reset based on the most recent call (t1 + timeout, t2 + timeout) etc... the fun is also updated"},{"ref":"Debounce.html#immediate/3","title":"Debounce.immediate/3","type":"function","doc":"immediate executes the function immediately but blocks any further call under the same key for the given timeout."},{"ref":"Debounce.html#init/1","title":"Debounce.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Debounce.html#start_link/1","title":"Debounce.start_link/1","type":"function","doc":""},{"ref":"Diode.html","title":"Diode","type":"module","doc":""},{"ref":"Diode.html#chain_id/0","title":"Diode.chain_id/0","type":"function","doc":""},{"ref":"Diode.html#dataDir/1","title":"Diode.dataDir/1","type":"function","doc":""},{"ref":"Diode.html#dev_mode?/0","title":"Diode.dev_mode?/0","type":"function","doc":""},{"ref":"Diode.html#edgePort/0","title":"Diode.edgePort/0","type":"function","doc":""},{"ref":"Diode.html#env/0","title":"Diode.env/0","type":"function","doc":""},{"ref":"Diode.html#fleetAddress/0","title":"Diode.fleetAddress/0","type":"function","doc":""},{"ref":"Diode.html#get_env_int/2","title":"Diode.get_env_int/2","type":"function","doc":""},{"ref":"Diode.html#hash/1","title":"Diode.hash/1","type":"function","doc":""},{"ref":"Diode.html#host/0","title":"Diode.host/0","type":"function","doc":""},{"ref":"Diode.html#kademliaPort/0","title":"Diode.kademliaPort/0","type":"function","doc":""},{"ref":"Diode.html#miner/0","title":"Diode.miner/0","type":"function","doc":""},{"ref":"Diode.html#registryAddress/0","title":"Diode.registryAddress/0","type":"function","doc":""},{"ref":"Diode.html#rpcPort/0","title":"Diode.rpcPort/0","type":"function","doc":""},{"ref":"Diode.html#rpcsPort/0","title":"Diode.rpcsPort/0","type":"function","doc":""},{"ref":"Diode.html#seeds/0","title":"Diode.seeds/0","type":"function","doc":""},{"ref":"Diode.html#self/0","title":"Diode.self/0","type":"function","doc":""},{"ref":"Diode.html#self/1","title":"Diode.self/1","type":"function","doc":""},{"ref":"Diode.html#start/2","title":"Diode.start/2","type":"function","doc":"Called when an application is started. This function is called when an application is started using Application.start/2 (and functions on top of that, such as Application.ensure_started/2). This function should start the top-level process of the application (which should be the top supervisor of the application&#39;s supervision tree if the application follows the OTP design principles around supervision). start_type defines how the application is started: :normal - used if the startup is a normal startup or if the application is distributed and is started on the current node because of a failover from another node and the application specification key :start_phases is :undefined. {:takeover, node} - used if the application is distributed and is started on the current node because of a failover on the node node. {:failover, node} - used if the application is distributed and is started on the current node because of a failover on node node, and the application specification key :start_phases is not :undefined. start_args are the arguments passed to the application in the :mod specification key (e.g., mod: {MyApp, [:my_args]}). This function should either return {:ok, pid} or {:ok, pid, state} if startup is successful. pid should be the PID of the top supervisor. state can be an arbitrary term, and if omitted will default to []; if the application is later stopped, state is passed to the stop/1 callback (see the documentation for the c:stop/1 callback for more information). use Application provides no default implementation for the start/2 callback. Callback implementation for Application.start/2."},{"ref":"Diode.html#start_mnesia/0","title":"Diode.start_mnesia/0","type":"function","doc":""},{"ref":"Diode.html#syncing?/0","title":"Diode.syncing?/0","type":"function","doc":""},{"ref":"Diode.html#test_mode?/0","title":"Diode.test_mode?/0","type":"function","doc":""},{"ref":"Diode.html#ticket_grace/0","title":"Diode.ticket_grace/0","type":"function","doc":"Number of bytes the server is willing to send without payment yet."},{"ref":"Diode.html#ticket_grace/1","title":"Diode.ticket_grace/1","type":"function","doc":""},{"ref":"Diode.html#trace/1","title":"Diode.trace/1","type":"function","doc":""},{"ref":"Diode.html#trace?/0","title":"Diode.trace?/0","type":"function","doc":""},{"ref":"Diode.html#travis_mode?/0","title":"Diode.travis_mode?/0","type":"function","doc":""},{"ref":"Diode.html#wallets/0","title":"Diode.wallets/0","type":"function","doc":"Decode env parameter such as export WALLETS=&quot;0x1234567890 0x987654321&quot;"},{"ref":"Diode.html#workerMode/0","title":"Diode.workerMode/0","type":"function","doc":""},{"ref":"Evm.html","title":"Evm","type":"module","doc":"EVM Interface using an extern C application based on EVMC (currently Aleth)"},{"ref":"Evm.html#create_address/1","title":"Evm.create_address/1","type":"function","doc":""},{"ref":"Evm.html#eval/1","title":"Evm.eval/1","type":"function","doc":""},{"ref":"Evm.html#eval_internal/1","title":"Evm.eval_internal/1","type":"function","doc":""},{"ref":"Evm.html#eval_internal_evm/1","title":"Evm.eval_internal_evm/1","type":"function","doc":""},{"ref":"Evm.html#eval_internal_precompile/2","title":"Evm.eval_internal_precompile/2","type":"function","doc":""},{"ref":"Evm.html#gas/1","title":"Evm.gas/1","type":"function","doc":""},{"ref":"Evm.html#gas_cost/1","title":"Evm.gas_cost/1","type":"function","doc":""},{"ref":"Evm.html#init/0","title":"Evm.init/0","type":"function","doc":""},{"ref":"Evm.html#init/5","title":"Evm.init/5","type":"function","doc":""},{"ref":"Evm.html#input/1","title":"Evm.input/1","type":"function","doc":""},{"ref":"Evm.html#logs/1","title":"Evm.logs/1","type":"function","doc":""},{"ref":"Evm.html#out/1","title":"Evm.out/1","type":"function","doc":""},{"ref":"Evm.html#return_data/1","title":"Evm.return_data/1","type":"function","doc":""},{"ref":"Evm.html#set_state/2","title":"Evm.set_state/2","type":"function","doc":""},{"ref":"Evm.html#state/1","title":"Evm.state/1","type":"function","doc":""},{"ref":"Evm.html#trace/1","title":"Evm.trace/1","type":"function","doc":""},{"ref":"Evm.State.html","title":"Evm.State","type":"module","doc":""},{"ref":"Evm.State.html#account/1","title":"Evm.State.account/1","type":"function","doc":""},{"ref":"Evm.State.html#address/1","title":"Evm.State.address/1","type":"function","doc":""},{"ref":"Evm.State.html#call_contract/7","title":"Evm.State.call_contract/7","type":"function","doc":""},{"ref":"Evm.State.html#code/1","title":"Evm.State.code/1","type":"function","doc":""},{"ref":"Evm.State.html#coinbase/1","title":"Evm.State.coinbase/1","type":"function","doc":""},{"ref":"Evm.State.html#difficulty/1","title":"Evm.State.difficulty/1","type":"function","doc":""},{"ref":"Evm.State.html#evm/1","title":"Evm.State.evm/1","type":"function","doc":""},{"ref":"Evm.State.html#gas/1","title":"Evm.State.gas/1","type":"function","doc":""},{"ref":"Evm.State.html#gas_limit/1","title":"Evm.State.gas_limit/1","type":"function","doc":""},{"ref":"Evm.State.html#gas_price/1","title":"Evm.State.gas_price/1","type":"function","doc":""},{"ref":"Evm.State.html#number/1","title":"Evm.State.number/1","type":"function","doc":""},{"ref":"Evm.State.html#store/1","title":"Evm.State.store/1","type":"function","doc":""},{"ref":"Evm.State.html#timestamp/1","title":"Evm.State.timestamp/1","type":"function","doc":""},{"ref":"Hash.html","title":"Hash","type":"module","doc":""},{"ref":"Hash.html#integer/1","title":"Hash.integer/1","type":"function","doc":""},{"ref":"Hash.html#keccak_256/1","title":"Hash.keccak_256/1","type":"function","doc":""},{"ref":"Hash.html#ripemd160/1","title":"Hash.ripemd160/1","type":"function","doc":""},{"ref":"Hash.html#sha3_256/1","title":"Hash.sha3_256/1","type":"function","doc":""},{"ref":"Hash.html#to_address/1","title":"Hash.to_address/1","type":"function","doc":""},{"ref":"Hash.html#to_bytes32/1","title":"Hash.to_bytes32/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html","title":"HeapMerkleTree","type":"module","doc":""},{"ref":"HeapMerkleTree.html#bucket_count/1","title":"HeapMerkleTree.bucket_count/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html#delete/2","title":"HeapMerkleTree.delete/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#get/2","title":"HeapMerkleTree.get/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#get_proofs/2","title":"HeapMerkleTree.get_proofs/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#insert/3","title":"HeapMerkleTree.insert/3","type":"function","doc":""},{"ref":"HeapMerkleTree.html#insert_item/2","title":"HeapMerkleTree.insert_item/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#insert_items/2","title":"HeapMerkleTree.insert_items/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#member?/2","title":"HeapMerkleTree.member?/2","type":"function","doc":""},{"ref":"HeapMerkleTree.html#new/0","title":"HeapMerkleTree.new/0","type":"function","doc":""},{"ref":"HeapMerkleTree.html#root_hash/1","title":"HeapMerkleTree.root_hash/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html#root_hashes/1","title":"HeapMerkleTree.root_hashes/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html#size/1","title":"HeapMerkleTree.size/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html#to_list/1","title":"HeapMerkleTree.to_list/1","type":"function","doc":""},{"ref":"HeapMerkleTree.html#t:hash_count/0","title":"HeapMerkleTree.hash_count/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:hash_type/0","title":"HeapMerkleTree.hash_type/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:item/0","title":"HeapMerkleTree.item/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:key_type/0","title":"HeapMerkleTree.key_type/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:merkle/0","title":"HeapMerkleTree.merkle/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:proof_type/0","title":"HeapMerkleTree.proof_type/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:tree/0","title":"HeapMerkleTree.tree/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:tree_leaf/0","title":"HeapMerkleTree.tree_leaf/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:tree_node/0","title":"HeapMerkleTree.tree_node/0","type":"type","doc":""},{"ref":"HeapMerkleTree.html#t:value_type/0","title":"HeapMerkleTree.value_type/0","type":"type","doc":""},{"ref":"Json.html","title":"Json","type":"module","doc":""},{"ref":"Json.html#decode/1","title":"Json.decode/1","type":"function","doc":""},{"ref":"Json.html#decode!/1","title":"Json.decode!/1","type":"function","doc":""},{"ref":"Json.html#encode!/2","title":"Json.encode!/2","type":"function","doc":""},{"ref":"Json.html#prepare!/2","title":"Json.prepare!/2","type":"function","doc":""},{"ref":"KBuckets.html","title":"KBuckets","type":"module","doc":"Provides 256 bits k-buckets for hashes"},{"ref":"KBuckets.html#bucket_count/1","title":"KBuckets.bucket_count/1","type":"function","doc":""},{"ref":"KBuckets.html#delete_item/2","title":"KBuckets.delete_item/2","type":"function","doc":""},{"ref":"KBuckets.html#distance/2","title":"KBuckets.distance/2","type":"function","doc":"Calculates the linear distance on a geometric ring from 0 to 2^256 any distance. Because it&#39;s a ring the maximal distance is two points being opposite of each other. In that case the distance is 2^255. 2^256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 2^255 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"ref":"KBuckets.html#hash/1","title":"KBuckets.hash/1","type":"function","doc":""},{"ref":"KBuckets.html#insert_item/2","title":"KBuckets.insert_item/2","type":"function","doc":""},{"ref":"KBuckets.html#insert_items/2","title":"KBuckets.insert_items/2","type":"function","doc":""},{"ref":"KBuckets.html#is_self/1","title":"KBuckets.is_self/1","type":"function","doc":""},{"ref":"KBuckets.html#item/2","title":"KBuckets.item/2","type":"function","doc":""},{"ref":"KBuckets.html#k/0","title":"KBuckets.k/0","type":"function","doc":""},{"ref":"KBuckets.html#key/1","title":"KBuckets.key/1","type":"function","doc":""},{"ref":"KBuckets.html#member?/2","title":"KBuckets.member?/2","type":"function","doc":""},{"ref":"KBuckets.html#nearer_n/3","title":"KBuckets.nearer_n/3","type":"function","doc":"nearer_n finds the n nodes nearer or equal to the current node to the provided item."},{"ref":"KBuckets.html#nearest_n/3","title":"KBuckets.nearest_n/3","type":"function","doc":"nearest_n finds the n nodes nearer or equal to the current node to the provided item."},{"ref":"KBuckets.html#new/1","title":"KBuckets.new/1","type":"function","doc":""},{"ref":"KBuckets.html#object/1","title":"KBuckets.object/1","type":"function","doc":""},{"ref":"KBuckets.html#self/1","title":"KBuckets.self/1","type":"function","doc":""},{"ref":"KBuckets.html#size/1","title":"KBuckets.size/1","type":"function","doc":""},{"ref":"KBuckets.html#to_list/1","title":"KBuckets.to_list/1","type":"function","doc":""},{"ref":"KBuckets.html#to_uri/1","title":"KBuckets.to_uri/1","type":"function","doc":""},{"ref":"KBuckets.html#unique/1","title":"KBuckets.unique/1","type":"function","doc":""},{"ref":"KBuckets.html#update_item/2","title":"KBuckets.update_item/2","type":"function","doc":""},{"ref":"KBuckets.html#t:item/0","title":"KBuckets.item/0","type":"type","doc":""},{"ref":"KBuckets.html#t:item_id/0","title":"KBuckets.item_id/0","type":"type","doc":""},{"ref":"KBuckets.html#t:kbuckets/0","title":"KBuckets.kbuckets/0","type":"type","doc":""},{"ref":"KBuckets.html#t:node_id/0","title":"KBuckets.node_id/0","type":"type","doc":""},{"ref":"KBuckets.html#t:tree/0","title":"KBuckets.tree/0","type":"type","doc":""},{"ref":"KBuckets.Item.html","title":"KBuckets.Item","type":"module","doc":""},{"ref":"KBuckets.Item.html#disabled?/2","title":"KBuckets.Item.disabled?/2","type":"function","doc":""},{"ref":"Kademlia.html","title":"Kademlia","type":"module","doc":""},{"ref":"Kademlia.html#append/3","title":"Kademlia.append/3","type":"function","doc":""},{"ref":"Kademlia.html#child_spec/1","title":"Kademlia.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Kademlia.html#find_node/1","title":"Kademlia.find_node/1","type":"function","doc":""},{"ref":"Kademlia.html#find_node_lookup/1","title":"Kademlia.find_node_lookup/1","type":"function","doc":""},{"ref":"Kademlia.html#find_nodes/1","title":"Kademlia.find_nodes/1","type":"function","doc":""},{"ref":"Kademlia.html#find_value/1","title":"Kademlia.find_value/1","type":"function","doc":"find_value() is different from store() in that it might return an earlier result"},{"ref":"Kademlia.html#handle_continue/2","title":"Kademlia.handle_continue/2","type":"function","doc":"Invoked to handle continue instructions. It is useful for performing work after initialization or for splitting the work in a callback in multiple steps, updating the process state along the way. Return values are the same as c:handle_cast/2. This callback is optional. If one is not implemented, the server will fail if a continue instruction is used. This callback is only supported on Erlang/OTP 21+. Callback implementation for GenServer.handle_continue/2."},{"ref":"Kademlia.html#init/1","title":"Kademlia.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Kademlia.html#network/0","title":"Kademlia.network/0","type":"function","doc":""},{"ref":"Kademlia.html#oid_multiply/2","title":"Kademlia.oid_multiply/2","type":"function","doc":""},{"ref":"Kademlia.html#ping/1","title":"Kademlia.ping/1","type":"function","doc":""},{"ref":"Kademlia.html#publish/1","title":"Kademlia.publish/1","type":"function","doc":""},{"ref":"Kademlia.html#reset/0","title":"Kademlia.reset/0","type":"function","doc":"Method used for testing"},{"ref":"Kademlia.html#rpc/2","title":"Kademlia.rpc/2","type":"function","doc":""},{"ref":"Kademlia.html#start_link/1","title":"Kademlia.start_link/1","type":"function","doc":""},{"ref":"Kademlia.html#store/2","title":"Kademlia.store/2","type":"function","doc":"store() stores the given key-value pair in the @replication_factor nodes that are closest to the key"},{"ref":"Kademlia.html#t:t/0","title":"Kademlia.t/0","type":"type","doc":""},{"ref":"KademliaSearch.html","title":"KademliaSearch","type":"module","doc":"A @alpha multi-threaded kademlia search. Starts a master as well as @alpha workers and executed the specified cmd query in the network."},{"ref":"KademliaSearch.html#child_spec/1","title":"KademliaSearch.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"KademliaSearch.html#find_nodes/4","title":"KademliaSearch.find_nodes/4","type":"function","doc":""},{"ref":"KademliaSearch.html#init/1","title":"KademliaSearch.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"KademliaSearch.html#worker_loop/4","title":"KademliaSearch.worker_loop/4","type":"function","doc":""},{"ref":"KademliaStore.html","title":"KademliaStore","type":"module","doc":""},{"ref":"KademliaStore.html#append!/2","title":"KademliaStore.append!/2","type":"function","doc":""},{"ref":"KademliaStore.html#clear/0","title":"KademliaStore.clear/0","type":"function","doc":""},{"ref":"KademliaStore.html#find/1","title":"KademliaStore.find/1","type":"function","doc":""},{"ref":"KademliaStore.html#init/0","title":"KademliaStore.init/0","type":"function","doc":""},{"ref":"KademliaStore.html#store/2","title":"KademliaStore.store/2","type":"function","doc":""},{"ref":"Lru.html","title":"Lru","type":"module","doc":"Provides Least-Recently-Used Queue with a fixed maximum size"},{"ref":"Lru.html#get/3","title":"Lru.get/3","type":"function","doc":""},{"ref":"Lru.html#get_or_fill/3","title":"Lru.get_or_fill/3","type":"function","doc":""},{"ref":"Lru.html#insert/3","title":"Lru.insert/3","type":"function","doc":""},{"ref":"Lru.html#new/1","title":"Lru.new/1","type":"function","doc":""},{"ref":"Lru.html#size/1","title":"Lru.size/1","type":"function","doc":""},{"ref":"Lru.html#t:t/0","title":"Lru.t/0","type":"type","doc":""},{"ref":"MerkleTree.html","title":"MerkleTree","type":"module","doc":""},{"ref":"MerkleTree.html#bucket_count/1","title":"MerkleTree.bucket_count/1","type":"function","doc":""},{"ref":"MerkleTree.html#copy/1","title":"MerkleTree.copy/1","type":"function","doc":""},{"ref":"MerkleTree.html#copy/2","title":"MerkleTree.copy/2","type":"function","doc":""},{"ref":"MerkleTree.html#delete/2","title":"MerkleTree.delete/2","type":"function","doc":""},{"ref":"MerkleTree.html#difference/2","title":"MerkleTree.difference/2","type":"function","doc":""},{"ref":"MerkleTree.html#get/2","title":"MerkleTree.get/2","type":"function","doc":""},{"ref":"MerkleTree.html#get_proofs/2","title":"MerkleTree.get_proofs/2","type":"function","doc":""},{"ref":"MerkleTree.html#insert/3","title":"MerkleTree.insert/3","type":"function","doc":""},{"ref":"MerkleTree.html#insert_item/2","title":"MerkleTree.insert_item/2","type":"function","doc":""},{"ref":"MerkleTree.html#insert_items/2","title":"MerkleTree.insert_items/2","type":"function","doc":""},{"ref":"MerkleTree.html#member?/2","title":"MerkleTree.member?/2","type":"function","doc":""},{"ref":"MerkleTree.html#new/0","title":"MerkleTree.new/0","type":"function","doc":""},{"ref":"MerkleTree.html#root_hash/1","title":"MerkleTree.root_hash/1","type":"function","doc":""},{"ref":"MerkleTree.html#root_hashes/1","title":"MerkleTree.root_hashes/1","type":"function","doc":""},{"ref":"MerkleTree.html#size/1","title":"MerkleTree.size/1","type":"function","doc":""},{"ref":"MerkleTree.html#to_list/1","title":"MerkleTree.to_list/1","type":"function","doc":""},{"ref":"MerkleTree.html#t:hash_type/0","title":"MerkleTree.hash_type/0","type":"type","doc":""},{"ref":"MerkleTree.html#t:item/0","title":"MerkleTree.item/0","type":"type","doc":""},{"ref":"MerkleTree.html#t:key_type/0","title":"MerkleTree.key_type/0","type":"type","doc":""},{"ref":"MerkleTree.html#t:merkle/0","title":"MerkleTree.merkle/0","type":"type","doc":""},{"ref":"MerkleTree.html#t:proof_type/0","title":"MerkleTree.proof_type/0","type":"type","doc":""},{"ref":"MerkleTree.html#t:value_type/0","title":"MerkleTree.value_type/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html","title":"MnesiaMerkleTree","type":"module","doc":"1st Concept is to reuse same mnesia storage rows when keeping multiple trees. 2nd Concept is to offer a O(1) lookup based on keys for the &quot;top&quot; tree."},{"ref":"MnesiaMerkleTree.html#bucket_count/1","title":"MnesiaMerkleTree.bucket_count/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#delete/2","title":"MnesiaMerkleTree.delete/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#get/2","title":"MnesiaMerkleTree.get/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#get_proofs/2","title":"MnesiaMerkleTree.get_proofs/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#init/0","title":"MnesiaMerkleTree.init/0","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#insert/3","title":"MnesiaMerkleTree.insert/3","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#insert_item/2","title":"MnesiaMerkleTree.insert_item/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#insert_items/2","title":"MnesiaMerkleTree.insert_items/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#member?/2","title":"MnesiaMerkleTree.member?/2","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#new/0","title":"MnesiaMerkleTree.new/0","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#normalize/1","title":"MnesiaMerkleTree.normalize/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#null/0","title":"MnesiaMerkleTree.null/0","type":"function","doc":"null() returns the default empty tree for comparison"},{"ref":"MnesiaMerkleTree.html#restore/1","title":"MnesiaMerkleTree.restore/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#root_hash/1","title":"MnesiaMerkleTree.root_hash/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#root_hashes/1","title":"MnesiaMerkleTree.root_hashes/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#size/1","title":"MnesiaMerkleTree.size/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#store/1","title":"MnesiaMerkleTree.store/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#to_list/1","title":"MnesiaMerkleTree.to_list/1","type":"function","doc":""},{"ref":"MnesiaMerkleTree.html#t:hash_count/0","title":"MnesiaMerkleTree.hash_count/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:hash_type/0","title":"MnesiaMerkleTree.hash_type/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:item/0","title":"MnesiaMerkleTree.item/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:key_type/0","title":"MnesiaMerkleTree.key_type/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:merkle/0","title":"MnesiaMerkleTree.merkle/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:mnesia_key/0","title":"MnesiaMerkleTree.mnesia_key/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:proof_type/0","title":"MnesiaMerkleTree.proof_type/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:tree/0","title":"MnesiaMerkleTree.tree/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:tree_leaf/0","title":"MnesiaMerkleTree.tree_leaf/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:tree_node/0","title":"MnesiaMerkleTree.tree_node/0","type":"type","doc":""},{"ref":"MnesiaMerkleTree.html#t:value_type/0","title":"MnesiaMerkleTree.value_type/0","type":"type","doc":""},{"ref":"Network.EdgeHandler.html","title":"Network.EdgeHandler","type":"module","doc":"There are currently three access rights for &quot;Ports&quot; which are loosely following Posix conventions: 1) r = Read 2) w = Write 3) s = Shared"},{"ref":"Network.EdgeHandler.html#child_spec/1","title":"Network.EdgeHandler.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Network.EdgeHandler.html#device_address/1","title":"Network.EdgeHandler.device_address/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#device_id/1","title":"Network.EdgeHandler.device_id/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#do_init/1","title":"Network.EdgeHandler.do_init/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#handle_continue/2","title":"Network.EdgeHandler.handle_continue/2","type":"function","doc":"Invoked to handle continue instructions. It is useful for performing work after initialization or for splitting the work in a callback in multiple steps, updating the process state along the way. Return values are the same as c:handle_cast/2. This callback is optional. If one is not implemented, the server will fail if a continue instruction is used. This callback is only supported on Erlang/OTP 21+. Callback implementation for GenServer.handle_continue/2."},{"ref":"Network.EdgeHandler.html#handle_msg/2","title":"Network.EdgeHandler.handle_msg/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#init/1","title":"Network.EdgeHandler.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Network.EdgeHandler.html#log/3","title":"Network.EdgeHandler.log/3","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#name/1","title":"Network.EdgeHandler.name/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#on_nodeid/1","title":"Network.EdgeHandler.on_nodeid/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#ssl_options/1","title":"Network.EdgeHandler.ssl_options/1","type":"function","doc":""},{"ref":"Network.EdgeHandler.html#t:state/0","title":"Network.EdgeHandler.state/0","type":"type","doc":""},{"ref":"Network.EdgeHandler.Port.html","title":"Network.EdgeHandler.Port","type":"module","doc":""},{"ref":"Network.EdgeHandler.Port.html#t:t/0","title":"Network.EdgeHandler.Port.t/0","type":"type","doc":""},{"ref":"Network.EdgeHandler.PortClient.html","title":"Network.EdgeHandler.PortClient","type":"module","doc":""},{"ref":"Network.EdgeHandler.PortClient.html#t:t/0","title":"Network.EdgeHandler.PortClient.t/0","type":"type","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html","title":"Network.EdgeHandler.PortCollection","type":"module","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#delete/2","title":"Network.EdgeHandler.PortCollection.delete/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#find_sharedport/2","title":"Network.EdgeHandler.PortCollection.find_sharedport/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#get/3","title":"Network.EdgeHandler.PortCollection.get/3","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#get_clientmon/2","title":"Network.EdgeHandler.PortCollection.get_clientmon/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#get_clientref/2","title":"Network.EdgeHandler.PortCollection.get_clientref/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#put/2","title":"Network.EdgeHandler.PortCollection.put/2","type":"function","doc":""},{"ref":"Network.EdgeHandler.PortCollection.html#t:t/0","title":"Network.EdgeHandler.PortCollection.t/0","type":"type","doc":""},{"ref":"Network.Handler.html","title":"Network.Handler","type":"behaviour","doc":""},{"ref":"Network.Handler.html#c:do_init/0","title":"Network.Handler.do_init/0","type":"callback","doc":""},{"ref":"Network.Handler.html#c:on_nodeid/1","title":"Network.Handler.on_nodeid/1","type":"callback","doc":""},{"ref":"Network.Handler.html#c:ssl_options/1","title":"Network.Handler.ssl_options/1","type":"callback","doc":""},{"ref":"Network.PeerHandler.html","title":"Network.PeerHandler","type":"module","doc":""},{"ref":"Network.PeerHandler.html#child_spec/1","title":"Network.PeerHandler.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Network.PeerHandler.html#do_init/1","title":"Network.PeerHandler.do_init/1","type":"function","doc":""},{"ref":"Network.PeerHandler.html#find_node/0","title":"Network.PeerHandler.find_node/0","type":"function","doc":""},{"ref":"Network.PeerHandler.html#find_value/0","title":"Network.PeerHandler.find_value/0","type":"function","doc":""},{"ref":"Network.PeerHandler.html#handle_continue/2","title":"Network.PeerHandler.handle_continue/2","type":"function","doc":"Invoked to handle continue instructions. It is useful for performing work after initialization or for splitting the work in a callback in multiple steps, updating the process state along the way. Return values are the same as c:handle_cast/2. This callback is optional. If one is not implemented, the server will fail if a continue instruction is used. This callback is only supported on Erlang/OTP 21+. Callback implementation for GenServer.handle_continue/2."},{"ref":"Network.PeerHandler.html#init/1","title":"Network.PeerHandler.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Network.PeerHandler.html#log/3","title":"Network.PeerHandler.log/3","type":"function","doc":""},{"ref":"Network.PeerHandler.html#name/1","title":"Network.PeerHandler.name/1","type":"function","doc":""},{"ref":"Network.PeerHandler.html#on_nodeid/1","title":"Network.PeerHandler.on_nodeid/1","type":"function","doc":""},{"ref":"Network.PeerHandler.html#publish/0","title":"Network.PeerHandler.publish/0","type":"function","doc":""},{"ref":"Network.PeerHandler.html#ssl_options/1","title":"Network.PeerHandler.ssl_options/1","type":"function","doc":""},{"ref":"Network.PeerHandler.html#store/0","title":"Network.PeerHandler.store/0","type":"function","doc":""},{"ref":"Network.Rpc.html","title":"Network.Rpc","type":"module","doc":""},{"ref":"Network.Rpc.html#create_transaction/3","title":"Network.Rpc.create_transaction/3","type":"function","doc":""},{"ref":"Network.Rpc.html#decode_opts/1","title":"Network.Rpc.decode_opts/1","type":"function","doc":""},{"ref":"Network.Rpc.html#execute_dev/2","title":"Network.Rpc.execute_dev/2","type":"function","doc":""},{"ref":"Network.Rpc.html#execute_dio/2","title":"Network.Rpc.execute_dio/2","type":"function","doc":""},{"ref":"Network.Rpc.html#execute_private/2","title":"Network.Rpc.execute_private/2","type":"function","doc":""},{"ref":"Network.Rpc.html#execute_rpc/3","title":"Network.Rpc.execute_rpc/3","type":"function","doc":""},{"ref":"Network.Rpc.html#execute_std/2","title":"Network.Rpc.execute_std/2","type":"function","doc":""},{"ref":"Network.Rpc.html#get_block/1","title":"Network.Rpc.get_block/1","type":"function","doc":""},{"ref":"Network.Rpc.html#handle_jsonrpc/2","title":"Network.Rpc.handle_jsonrpc/2","type":"function","doc":""},{"ref":"Network.RpcHttp.html","title":"Network.RpcHttp","type":"module","doc":""},{"ref":"Network.RpcHttp.html#call/2","title":"Network.RpcHttp.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"Network.RpcHttp.html#init/1","title":"Network.RpcHttp.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"Network.RpcWs.html","title":"Network.RpcWs","type":"module","doc":""},{"ref":"Network.RpcWs.html#execute_rpc/2","title":"Network.RpcWs.execute_rpc/2","type":"function","doc":""},{"ref":"Network.RpcWs.html#init/3","title":"Network.RpcWs.init/3","type":"function","doc":""},{"ref":"Network.RpcWs.html#websocket_handle/3","title":"Network.RpcWs.websocket_handle/3","type":"function","doc":"Callback implementation for c::cowboy_websocket_handler.websocket_handle/3."},{"ref":"Network.RpcWs.html#websocket_info/3","title":"Network.RpcWs.websocket_info/3","type":"function","doc":"Callback implementation for c::cowboy_websocket_handler.websocket_info/3."},{"ref":"Network.RpcWs.html#websocket_init/3","title":"Network.RpcWs.websocket_init/3","type":"function","doc":"Callback implementation for c::cowboy_websocket_handler.websocket_init/3."},{"ref":"Network.RpcWs.html#websocket_terminate/3","title":"Network.RpcWs.websocket_terminate/3","type":"function","doc":"Callback implementation for c::cowboy_websocket_handler.websocket_terminate/3."},{"ref":"Network.Server.html","title":"Network.Server","type":"module","doc":"General TLS socket server that ensures: * Secp256k1 handshakes * Identities on server and client * Self-signed certs on both of them Then it spawns client connection based on the protocol handler"},{"ref":"Network.Server.html#check/3","title":"Network.Server.check/3","type":"function","doc":""},{"ref":"Network.Server.html#child/3","title":"Network.Server.child/3","type":"function","doc":""},{"ref":"Network.Server.html#child_spec/1","title":"Network.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Network.Server.html#default_ssl_options/1","title":"Network.Server.default_ssl_options/1","type":"function","doc":""},{"ref":"Network.Server.html#ensure_node_connection/4","title":"Network.Server.ensure_node_connection/4","type":"function","doc":""},{"ref":"Network.Server.html#get_connections/1","title":"Network.Server.get_connections/1","type":"function","doc":""},{"ref":"Network.Server.html#handle_continue/2","title":"Network.Server.handle_continue/2","type":"function","doc":"Invoked to handle continue instructions. It is useful for performing work after initialization or for splitting the work in a callback in multiple steps, updating the process state along the way. Return values are the same as c:handle_cast/2. This callback is optional. If one is not implemented, the server will fail if a continue instruction is used. This callback is only supported on Erlang/OTP 21+. Callback implementation for GenServer.handle_continue/2."},{"ref":"Network.Server.html#init/1","title":"Network.Server.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Network.Server.html#start_link/1","title":"Network.Server.start_link/1","type":"function","doc":""},{"ref":"Network.Server.html#t:sslsocket/0","title":"Network.Server.sslsocket/0","type":"type","doc":""},{"ref":"Network.Server.html#t:t/0","title":"Network.Server.t/0","type":"type","doc":""},{"ref":"Object.html","title":"Object","type":"behaviour","doc":"All objects are made of tuples {:type, value1, value2, ..., valueN, signature} The number of values are different but the last signature is a signature is always is the signature of BertExt.encode!([value1, value2, ..., valueN])) Also the signatures public key is always equal to the key"},{"ref":"Object.html#decode!/1","title":"Object.decode!/1","type":"function","doc":""},{"ref":"Object.html#decode_list!/1","title":"Object.decode_list!/1","type":"function","doc":""},{"ref":"Object.html#encode!/1","title":"Object.encode!/1","type":"function","doc":""},{"ref":"Object.html#encode_list!/1","title":"Object.encode_list!/1","type":"function","doc":""},{"ref":"Object.html#key/1","title":"Object.key/1","type":"function","doc":""},{"ref":"Object.html#c:key/1","title":"Object.key/1","type":"callback","doc":""},{"ref":"Object.html#ticket_id/1","title":"Object.ticket_id/1","type":"function","doc":""},{"ref":"Object.html#t:key/0","title":"Object.key/0","type":"type","doc":""},{"ref":"Object.Server.html","title":"Object.Server","type":"module","doc":""},{"ref":"Object.Server.html#edge_port/1","title":"Object.Server.edge_port/1","type":"function","doc":""},{"ref":"Object.Server.html#host/1","title":"Object.Server.host/1","type":"function","doc":""},{"ref":"Object.Server.html#key/1","title":"Object.Server.key/1","type":"function","doc":"Callback implementation for Object.key/1."},{"ref":"Object.Server.html#new/3","title":"Object.Server.new/3","type":"function","doc":""},{"ref":"Object.Server.html#server/1","title":"Object.Server.server/1","type":"macro","doc":""},{"ref":"Object.Server.html#server/2","title":"Object.Server.server/2","type":"macro","doc":""},{"ref":"Object.Server.html#server_port/1","title":"Object.Server.server_port/1","type":"function","doc":""},{"ref":"Object.Server.html#sign/2","title":"Object.Server.sign/2","type":"function","doc":""},{"ref":"Object.Server.html#signature/1","title":"Object.Server.signature/1","type":"function","doc":""},{"ref":"Object.Server.html#uri/1","title":"Object.Server.uri/1","type":"function","doc":""},{"ref":"Object.Server.html#t:server/0","title":"Object.Server.server/0","type":"type","doc":""},{"ref":"Object.Ticket.html","title":"Object.Ticket","type":"module","doc":""},{"ref":"Object.Ticket.html#block/1","title":"Object.Ticket.block/1","type":"function","doc":""},{"ref":"Object.Ticket.html#block_hash/1","title":"Object.Ticket.block_hash/1","type":"function","doc":""},{"ref":"Object.Ticket.html#block_number/1","title":"Object.Ticket.block_number/1","type":"function","doc":""},{"ref":"Object.Ticket.html#device_address/1","title":"Object.Ticket.device_address/1","type":"function","doc":""},{"ref":"Object.Ticket.html#device_blob/1","title":"Object.Ticket.device_blob/1","type":"function","doc":""},{"ref":"Object.Ticket.html#device_sign/2","title":"Object.Ticket.device_sign/2","type":"function","doc":""},{"ref":"Object.Ticket.html#device_signature/1","title":"Object.Ticket.device_signature/1","type":"function","doc":""},{"ref":"Object.Ticket.html#device_verify/2","title":"Object.Ticket.device_verify/2","type":"function","doc":""},{"ref":"Object.Ticket.html#epoch/1","title":"Object.Ticket.epoch/1","type":"function","doc":""},{"ref":"Object.Ticket.html#fleet_contract/1","title":"Object.Ticket.fleet_contract/1","type":"function","doc":""},{"ref":"Object.Ticket.html#key/1","title":"Object.Ticket.key/1","type":"function","doc":"Callback implementation for Object.key/1."},{"ref":"Object.Ticket.html#local_address/1","title":"Object.Ticket.local_address/1","type":"function","doc":""},{"ref":"Object.Ticket.html#raw/1","title":"Object.Ticket.raw/1","type":"function","doc":"Format for putting into a transaction with &quot;SubmitTicketRaw&quot;"},{"ref":"Object.Ticket.html#server_blob/1","title":"Object.Ticket.server_blob/1","type":"function","doc":""},{"ref":"Object.Ticket.html#server_id/1","title":"Object.Ticket.server_id/1","type":"function","doc":""},{"ref":"Object.Ticket.html#server_sign/2","title":"Object.Ticket.server_sign/2","type":"function","doc":""},{"ref":"Object.Ticket.html#server_signature/1","title":"Object.Ticket.server_signature/1","type":"function","doc":""},{"ref":"Object.Ticket.html#ticket/1","title":"Object.Ticket.ticket/1","type":"macro","doc":""},{"ref":"Object.Ticket.html#ticket/2","title":"Object.Ticket.ticket/2","type":"macro","doc":""},{"ref":"Object.Ticket.html#total_bytes/1","title":"Object.Ticket.total_bytes/1","type":"function","doc":""},{"ref":"Object.Ticket.html#total_connections/1","title":"Object.Ticket.total_connections/1","type":"function","doc":""},{"ref":"Object.Ticket.html#t:ticket/0","title":"Object.Ticket.ticket/0","type":"type","doc":""},{"ref":"OnCrash.html","title":"OnCrash","type":"module","doc":""},{"ref":"OnCrash.html#call/2","title":"OnCrash.call/2","type":"function","doc":""},{"ref":"Overlord.html","title":"Overlord","type":"module","doc":""},{"ref":"Overlord.html#child_spec/1","title":"Overlord.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Overlord.html#init/1","title":"Overlord.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Overlord.html#once_reduce/4","title":"Overlord.once_reduce/4","type":"function","doc":""},{"ref":"Overlord.html#reduce/4","title":"Overlord.reduce/4","type":"function","doc":""},{"ref":"Overlord.html#start_link/1","title":"Overlord.start_link/1","type":"function","doc":""},{"ref":"Overlord.html#stop/1","title":"Overlord.stop/1","type":"function","doc":""},{"ref":"Overlord.Minion.html","title":"Overlord.Minion","type":"module","doc":""},{"ref":"Overlord.Minion.html#child_spec/1","title":"Overlord.Minion.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Overlord.Minion.html#init/1","title":"Overlord.Minion.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Overlord.Minion.html#send/3","title":"Overlord.Minion.send/3","type":"function","doc":""},{"ref":"Overlord.Minion.html#start_link/1","title":"Overlord.Minion.start_link/1","type":"function","doc":""},{"ref":"Overlord.Minion.html#stop/1","title":"Overlord.Minion.stop/1","type":"function","doc":""},{"ref":"PreCompiles.html","title":"PreCompiles","type":"module","doc":""},{"ref":"PreCompiles.html#copy/2","title":"PreCompiles.copy/2","type":"function","doc":""},{"ref":"PreCompiles.html#ecrecover/2","title":"PreCompiles.ecrecover/2","type":"function","doc":""},{"ref":"PreCompiles.html#get/1","title":"PreCompiles.get/1","type":"function","doc":""},{"ref":"PreCompiles.html#modExp/2","title":"PreCompiles.modExp/2","type":"function","doc":""},{"ref":"PreCompiles.html#ripemd160/2","title":"PreCompiles.ripemd160/2","type":"function","doc":""},{"ref":"PreCompiles.html#sha256/2","title":"PreCompiles.sha256/2","type":"function","doc":""},{"ref":"Profiler.html","title":"Profiler","type":"module","doc":""},{"ref":"Profiler.html#print/1","title":"Profiler.print/1","type":"function","doc":""},{"ref":"Profiler.html#print/3","title":"Profiler.print/3","type":"function","doc":""},{"ref":"Profiler.html#processes/1","title":"Profiler.processes/1","type":"function","doc":""},{"ref":"Profiler.html#profile/2","title":"Profiler.profile/2","type":"function","doc":""},{"ref":"Profiler.html#profile_simple/2","title":"Profiler.profile_simple/2","type":"function","doc":""},{"ref":"Profiler.html#time/2","title":"Profiler.time/2","type":"function","doc":""},{"ref":"Profiler.html#update/2","title":"Profiler.update/2","type":"function","doc":""},{"ref":"PubSub.html","title":"PubSub","type":"module","doc":""},{"ref":"PubSub.html#child_spec/1","title":"PubSub.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"PubSub.html#init/1","title":"PubSub.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"PubSub.html#publish/2","title":"PubSub.publish/2","type":"function","doc":""},{"ref":"PubSub.html#start_link/1","title":"PubSub.start_link/1","type":"function","doc":""},{"ref":"PubSub.html#subscribe/1","title":"PubSub.subscribe/1","type":"function","doc":""},{"ref":"PubSub.html#subscribers/1","title":"PubSub.subscribers/1","type":"function","doc":""},{"ref":"PubSub.html#unsubscribe/1","title":"PubSub.unsubscribe/1","type":"function","doc":""},{"ref":"Queue.html","title":"Queue","type":"module","doc":""},{"ref":"Queue.html#append/1","title":"Queue.append/1","type":"function","doc":""},{"ref":"Queue.html#child_spec/1","title":"Queue.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Queue.html#init/1","title":"Queue.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Queue.html#shift/0","title":"Queue.shift/0","type":"function","doc":""},{"ref":"Queue.html#size/0","title":"Queue.size/0","type":"function","doc":""},{"ref":"Queue.html#start_link/1","title":"Queue.start_link/1","type":"function","doc":""},{"ref":"Rlp.html","title":"Rlp","type":"module","doc":""},{"ref":"Rlp.html#bin2addr/1","title":"Rlp.bin2addr/1","type":"function","doc":""},{"ref":"Rlp.html#bin2num/1","title":"Rlp.bin2num/1","type":"function","doc":""},{"ref":"Rlp.html#decode!/1","title":"Rlp.decode!/1","type":"function","doc":""},{"ref":"Rlp.html#encode!/1","title":"Rlp.encode!/1","type":"function","doc":""},{"ref":"Rlp.html#hex2addr/1","title":"Rlp.hex2addr/1","type":"function","doc":""},{"ref":"Rlp.html#hex2num/1","title":"Rlp.hex2num/1","type":"function","doc":""},{"ref":"Secp256k1.html","title":"Secp256k1","type":"module","doc":""},{"ref":"Secp256k1.html#bitcoin_to_rlp/2","title":"Secp256k1.bitcoin_to_rlp/2","type":"function","doc":""},{"ref":"Secp256k1.html#chain_id/1","title":"Secp256k1.chain_id/1","type":"function","doc":""},{"ref":"Secp256k1.html#compress_public/1","title":"Secp256k1.compress_public/1","type":"function","doc":""},{"ref":"Secp256k1.html#decompress_public/1","title":"Secp256k1.decompress_public/1","type":"function","doc":""},{"ref":"Secp256k1.html#der_encode_private/2","title":"Secp256k1.der_encode_private/2","type":"function","doc":""},{"ref":"Secp256k1.html#erl_encode_cert/1","title":"Secp256k1.erl_encode_cert/1","type":"function","doc":""},{"ref":"Secp256k1.html#erl_encode_private/2","title":"Secp256k1.erl_encode_private/2","type":"function","doc":""},{"ref":"Secp256k1.html#generate/0","title":"Secp256k1.generate/0","type":"function","doc":"Returns {PublicKey, PrivKeyOut}"},{"ref":"Secp256k1.html#generate_public_key/1","title":"Secp256k1.generate_public_key/1","type":"function","doc":""},{"ref":"Secp256k1.html#pem_encode_private/2","title":"Secp256k1.pem_encode_private/2","type":"function","doc":""},{"ref":"Secp256k1.html#recover/3","title":"Secp256k1.recover/3","type":"function","doc":""},{"ref":"Secp256k1.html#recover!/3","title":"Secp256k1.recover!/3","type":"function","doc":""},{"ref":"Secp256k1.html#rlp_to_bitcoin/3","title":"Secp256k1.rlp_to_bitcoin/3","type":"function","doc":""},{"ref":"Secp256k1.html#selfsigned/2","title":"Secp256k1.selfsigned/2","type":"function","doc":""},{"ref":"Secp256k1.html#sign/3","title":"Secp256k1.sign/3","type":"function","doc":""},{"ref":"Secp256k1.html#signature_bitcoin_to_x509/1","title":"Secp256k1.signature_bitcoin_to_x509/1","type":"function","doc":""},{"ref":"Secp256k1.html#signature_x509_to_bitcoin/1","title":"Secp256k1.signature_x509_to_bitcoin/1","type":"function","doc":"Converts X.509 signature to bitcoin style signature"},{"ref":"Secp256k1.html#verify/3","title":"Secp256k1.verify/3","type":"function","doc":""},{"ref":"Secp256k1.html#t:compressed_public_key/0","title":"Secp256k1.compressed_public_key/0","type":"type","doc":""},{"ref":"Secp256k1.html#t:full_public_key/0","title":"Secp256k1.full_public_key/0","type":"type","doc":""},{"ref":"Secp256k1.html#t:private_key/0","title":"Secp256k1.private_key/0","type":"type","doc":""},{"ref":"Secp256k1.html#t:public_key/0","title":"Secp256k1.public_key/0","type":"type","doc":""},{"ref":"Secp256k1.html#t:signature/0","title":"Secp256k1.signature/0","type":"type","doc":""},{"ref":"Shell.html","title":"Shell","type":"module","doc":"TODO: This module is too heavily dependent on Network.Rpc, need to think about moving either Module Examples: me = Diode.miner() |&gt; Wallet.address!() Shell.get_balance(me) fleetContract = Base16.decode(&quot;0x6728c7bea74db60c2fb117c15de28b0b0686c389&quot;) Shell.call(fleetContract, &quot;accountant&quot;) registryContract = Diode.registryAddress() Shell.call(registryContract, &quot;ContractStake&quot;, [&quot;address&quot;], [fleetContract]) addr = Chain.GenesisFactory.genesis_accounts |&gt; hd |&gt; elem(0) Shell.call_from(Wallet.from_address(addr), registryContract, &quot;ContractStake&quot;, [&quot;address&quot;], [fleetContract])"},{"ref":"Shell.html#call/5","title":"Shell.call/5","type":"function","doc":""},{"ref":"Shell.html#call_from/6","title":"Shell.call_from/6","type":"function","doc":""},{"ref":"Shell.html#call_tx/2","title":"Shell.call_tx/2","type":"function","doc":""},{"ref":"Shell.html#ether/1","title":"Shell.ether/1","type":"function","doc":""},{"ref":"Shell.html#finney/1","title":"Shell.finney/1","type":"function","doc":""},{"ref":"Shell.html#get_balance/1","title":"Shell.get_balance/1","type":"function","doc":""},{"ref":"Shell.html#get_code/1","title":"Shell.get_code/1","type":"function","doc":""},{"ref":"Shell.html#get_miner_stake/1","title":"Shell.get_miner_stake/1","type":"function","doc":""},{"ref":"Shell.html#get_slot/2","title":"Shell.get_slot/2","type":"function","doc":""},{"ref":"Shell.html#gwei/1","title":"Shell.gwei/1","type":"function","doc":""},{"ref":"Shell.html#kwei/1","title":"Shell.kwei/1","type":"function","doc":""},{"ref":"Shell.html#mwei/1","title":"Shell.mwei/1","type":"function","doc":""},{"ref":"Shell.html#submit_from/6","title":"Shell.submit_from/6","type":"function","doc":""},{"ref":"Shell.html#szabo/1","title":"Shell.szabo/1","type":"function","doc":""},{"ref":"Shell.html#transaction/6","title":"Shell.transaction/6","type":"function","doc":""},{"ref":"Shell.html#wei/1","title":"Shell.wei/1","type":"function","doc":""},{"ref":"Store.html","title":"Store","type":"module","doc":""},{"ref":"Store.html#child_spec/1","title":"Store.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Store.html#clear_transactions/0","title":"Store.clear_transactions/0","type":"function","doc":""},{"ref":"Store.html#create_table!/3","title":"Store.create_table!/3","type":"function","doc":""},{"ref":"Store.html#get_network_for_device/1","title":"Store.get_network_for_device/1","type":"function","doc":""},{"ref":"Store.html#init/1","title":"Store.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Store.html#keyValue/1","title":"Store.keyValue/1","type":"macro","doc":""},{"ref":"Store.html#keyValue/2","title":"Store.keyValue/2","type":"macro","doc":""},{"ref":"Store.html#seed_transactions/0","title":"Store.seed_transactions/0","type":"function","doc":""},{"ref":"Store.html#seed_transactions/1","title":"Store.seed_transactions/1","type":"function","doc":""},{"ref":"Store.html#set_block_transactions/1","title":"Store.set_block_transactions/1","type":"function","doc":""},{"ref":"Store.html#set_transaction/2","title":"Store.set_transaction/2","type":"function","doc":""},{"ref":"Store.html#set_wallet/1","title":"Store.set_wallet/1","type":"function","doc":""},{"ref":"Store.html#start_link/1","title":"Store.start_link/1","type":"function","doc":""},{"ref":"Store.html#transaction/1","title":"Store.transaction/1","type":"function","doc":""},{"ref":"Store.html#transaction_block/1","title":"Store.transaction_block/1","type":"function","doc":""},{"ref":"Store.html#wallet/0","title":"Store.wallet/0","type":"function","doc":""},{"ref":"TicketStore.html","title":"TicketStore","type":"module","doc":""},{"ref":"TicketStore.html#add/1","title":"TicketStore.add/1","type":"function","doc":"Handling a ConnectionTicket"},{"ref":"TicketStore.html#clear/0","title":"TicketStore.clear/0","type":"function","doc":""},{"ref":"TicketStore.html#find/3","title":"TicketStore.find/3","type":"function","doc":""},{"ref":"TicketStore.html#id/1","title":"TicketStore.id/1","type":"function","doc":""},{"ref":"TicketStore.html#id/3","title":"TicketStore.id/3","type":"function","doc":""},{"ref":"TicketStore.html#init/0","title":"TicketStore.init/0","type":"function","doc":""},{"ref":"TicketStore.html#newblock/1","title":"TicketStore.newblock/1","type":"function","doc":""},{"ref":"TicketStore.html#tickets/1","title":"TicketStore.tickets/1","type":"function","doc":""},{"ref":"Wallet.html","title":"Wallet","type":"module","doc":"Might be merged with Id.ex, for now just starting with clear Ethereum triple needed for wallets: 1) Private Key 2) Public Key 3) Address A wallet can be instantiated from any of those, but accessors for higher level ids fail"},{"ref":"Wallet.html#address/1","title":"Wallet.address/1","type":"function","doc":""},{"ref":"Wallet.html#address!/1","title":"Wallet.address!/1","type":"function","doc":""},{"ref":"Wallet.html#base16/1","title":"Wallet.base16/1","type":"function","doc":""},{"ref":"Wallet.html#equal?/2","title":"Wallet.equal?/2","type":"function","doc":""},{"ref":"Wallet.html#from_address/1","title":"Wallet.from_address/1","type":"function","doc":""},{"ref":"Wallet.html#from_privkey/1","title":"Wallet.from_privkey/1","type":"function","doc":""},{"ref":"Wallet.html#from_pubkey/1","title":"Wallet.from_pubkey/1","type":"function","doc":""},{"ref":"Wallet.html#new/0","title":"Wallet.new/0","type":"function","doc":""},{"ref":"Wallet.html#nick/1","title":"Wallet.nick/1","type":"function","doc":""},{"ref":"Wallet.html#printable/1","title":"Wallet.printable/1","type":"function","doc":""},{"ref":"Wallet.html#privkey/1","title":"Wallet.privkey/1","type":"function","doc":""},{"ref":"Wallet.html#privkey!/1","title":"Wallet.privkey!/1","type":"function","doc":""},{"ref":"Wallet.html#pubkey/1","title":"Wallet.pubkey/1","type":"function","doc":""},{"ref":"Wallet.html#pubkey!/1","title":"Wallet.pubkey!/1","type":"function","doc":""},{"ref":"Wallet.html#pubkey_long/1","title":"Wallet.pubkey_long/1","type":"function","doc":""},{"ref":"Wallet.html#pubkey_long!/1","title":"Wallet.pubkey_long!/1","type":"function","doc":""},{"ref":"Wallet.html#wallet/1","title":"Wallet.wallet/1","type":"macro","doc":""},{"ref":"Wallet.html#wallet/2","title":"Wallet.wallet/2","type":"macro","doc":""},{"ref":"Wallet.html#words/1","title":"Wallet.words/1","type":"function","doc":""},{"ref":"Wallet.html#t:address/0","title":"Wallet.address/0","type":"type","doc":""},{"ref":"Wallet.html#t:compressed_public_key/0","title":"Wallet.compressed_public_key/0","type":"type","doc":""},{"ref":"Wallet.html#t:private_key/0","title":"Wallet.private_key/0","type":"type","doc":""},{"ref":"Wallet.html#t:t/0","title":"Wallet.t/0","type":"type","doc":""},{"ref":"Words.html","title":"Words","type":"module","doc":""},{"ref":"Words.html#encode/1","title":"Words.encode/1","type":"function","doc":""},{"ref":"Words.html#word/1","title":"Words.word/1","type":"function","doc":""},{"ref":"ZBert.html","title":"ZBert","type":"module","doc":""},{"ref":"ZBert.html#decode!/2","title":"ZBert.decode!/2","type":"function","doc":""},{"ref":"ZBert.html#encode!/2","title":"ZBert.encode!/2","type":"function","doc":""},{"ref":"ZBert.html#init/1","title":"ZBert.init/1","type":"function","doc":""},{"ref":"ZBert.html#zbert/1","title":"ZBert.zbert/1","type":"macro","doc":""},{"ref":"ZBert.html#zbert/2","title":"ZBert.zbert/2","type":"macro","doc":""}]